# TODO: Evolve this into a full script I can run on a fresh debian install.

# Absolute first packages needed
sudo apt install git python-is-python3 zsh

# Set up ssh key (see https://docs.github.com/en/github/authenticating-to-github/connecting-to-github-with-ssh)
ssh-keygen -t ed25519 -C "your_email@example.com"
eval "$(ssh-agent -s)"
ssh-add ~/.ssh/id_ed25519
# Add contents of id_ed25519.pub as key on GitHub, then test:
ssh -T git@github.com

mkdir -p src/cloned  # for git clones
mkdir bin
mkdir -p .local/share/fonts
mkdir -p .config/nvim/bundle

# ghar
# TODO: ghar add?
# TODO: add way to check all ghar repos for unpushed changes periodically
git clone https://github.com/philips/ghar.git src/ghar
git clone git@github.com:mjohnsonengr/dotfiles.git src/ghar/devel
src/ghar/bin/ghar install

# Install oh-my-zsh
sh -c "$(curl -fsSL https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh)"

#: zsh themes & plugins
# Don't download powerlevel10k on corp machine; it doesn't work yet
git clone --depth=1 https://github.com/romkatv/powerlevel10k.git ${ZSH_CUSTOM:-$HOME/.oh-my-zsh/custom}/themes/powerlevel10k
git clone https://github.com/zsh-users/zsh-autosuggestions ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-autosuggestions
git clone https://github.com/zsh-users/zsh-syntax-highlighting.git ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-syntax-highlighting

fc-cache
zsh  # if not already open

# apt-get packages to install (alphabetical)
# NOTE: packages intentionally not installed:
#   haskell-platform: use ghcup instead
sudo apt update
sudo apt install \
  apt-listchanges \
  apt-transport-https \
  autojump \
  build-essential \
  ca-certificates \
  clipit \
  curl \
  fzf \
  gnupg \
  lsb-release \
  mercurial \
  msmtp \
  msmtp-mta \
  neovim \
  openjdk-11-jdk \
  openjdk-11-jre \
  postgresql \
  python3-pip \
  python3-neovim \
  python3-setuptools \
  ripgrep \
  rlwrap \
  snapd \
  tmux \
  tree \
  unattended-upgrades \
  xclip \
  xsel \
  zip

# Install NVM, NPM and NodeJS
# check https://github.com/nvm-sh/nvm#installing-and-updating for newer version
curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.1/install.sh | bash
source ~/.zshrc
# nvm install --lts
nvm install node

# git-crecord
git clone https://github.com/andrewshadura/git-crecord.git src/cloned/git-crecord
cd src/git-crecord
./setup.py install
cd ~

# github CLI: https://github.com/cli/cli/blob/trunk/docs/install_linux.md
curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg
echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null
sudo apt update
sudo apt install gh

# Setup neovim
# I think this is required: python3 -m pip install --user virtualenv
# TODO: Make sure the below is correct (what is it installing it to?)
python3 -m pip install wheel neovim pylint
cd ~/.config/nvim
mkdir bundle
git clone https://github.com/VundleVim/Vundle.vim.git ~/.config/nvim/bundle/Vundle.vim
nvim -c 'PluginInstall'
# Not currently using this plugin
# cd ~/.config/nvim/bundle/LanguageClient-neovim
# ./install.sh

# Install Brave: brave.com/linux

# IntelliJ, PyCharm
snap install intellij-idea-community --classic
snap install pycharm-community --classic

## Color-scheme: Solarized everywhere
gnome-terminal: Profile Preferences # TODO: While here, fix other stuff?
gedit: # TODO: â˜° > Preferences > Font & Colors?
# gedit: https://github.com/altercation/solarized/tree/master/gedit
xed: Edit > Preferences > Theme > Solarized Dark

## Color-scheme: Obsidian
Windows Terminal: https://windowsterminalthemes.dev/
ChromeOS SSH: chrome-untrusted://terminal/html/nassh_preferences_editor.html

# Customize apps
gnome-terminal:
  * Edit -> Preferences
    * General
      * Uncheck "Show menubar by default in new terminals"
    * Profile
      * Text:
        * Initial terminal size: 132 * 43
      * Colors:
        * Uncheck "Use colors from system theme"
        * Built-in schemes: "Solarized dark"
        * Palette: "Solarized"
        * Uncheck "Show bold text in bright colors"
      * Command:
        * Check "Run command as a login shell"

#######################
# Misc system settings
#######################

### For Windows dual-boot machines, (store local time instead of UTC)
timedatectl set-local-rtc 1


### For non-Google machine
# brew
/bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"

# sdkman
curl -s "https://get.sdkman.io" | bash
source "$HOME/.sdkman/bin/sdkman-init.sh"
sdk install kotlin
sdk install gradle

# gng/gw (shortcut for ./gradlew) (https://gng.dsun.org/)
brew tap gdubw/gng
brew install gng

### Heroku
sudo snap install --classic heroku
# alternatively on Chromebook/Crostini
# curl https://cli-assets.heroku.com/install.sh | sh
# edit ~/.netrc w/ API key

# for postgresql, may need
# sudo -u postgres createuser -s $(whoami); createdb $(whoami)
# See https://stackoverflow.com/a/38444152/1405720

### Docker
 curl -fsSL https://download.docker.com/linux/debian/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
echo \
  "deb [arch=amd64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/debian \
  $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
sudo apt update
sudo apt install docker-ce docker-ce-cli containerd.io docker-compose-plugin
sudo groupadd docker
sudo usermod -aG docker $USER
newgrp docker
docker run hello-world

### Minikube + kubectl
curl -LO https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64
sudo install minikube-linux-amd64 /usr/local/bin/minikube
minikube start
curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
sudo install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl

### Redis
curl -fsSL https://packages.redis.io/gpg | sudo gpg --dearmor -o /usr/share/keyrings/redis-archive-keyring.gpg
echo "deb [signed-by=/usr/share/keyrings/redis-archive-keyring.gpg] https://packages.redis.io/deb $(lsb_release -cs) main" | sudo tee /etc/apt/sources.list.d/redis.list
sudo apt update
sudo aptinstall redis

### For Haskell/Plutus development:
curl --proto '=https' --tlsv1.2 -sSf https://get-ghcup.haskell.org | sh  # from https://www.haskell.org/ghcup/
curl -L https://nixos.org/nix/install | sh  # from https://nixos.org/download.html

### For SSH'ing into WSL2:
# Make sure SSH server is hardened (disable password auth, disable root, only allow one user
# Check out wsl2-network.ps1 https://gist.github.com/daehahn/497fa04c0156b1a762c70ff3f9f7edae?WT.mc_id=-blog-scottha

### msmtp/sendmail and unattended-upgrade
sudo cp .msmtprc /etc/msmtprc
# Make a Gmail app password for this machine and use below
sudo echo "machine smtp.gmail.com login sys@mej.dev password PASSWORD" >> /etc/netrc
sudo vim /etc/apt/apt.conf.d/50unattended-upgrades
# uncomment `${distro_id}:${distro_codename}-updates`
# uncomment `Unattended-Upgrade::Mail "root";` and replace with email address
# uncomment `Unattended-Upgrade::MailReport "on-change";`

